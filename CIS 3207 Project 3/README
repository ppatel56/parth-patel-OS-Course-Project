Parth Patel
CIS 3207 - Section 2
Project 3 - Network Spell Checker

Description: 

The Network Spell Checker Program is networking program in which multiple clients connect to one server 
and send a string to the server. The server would then process those inputs from the clients and determine 
if each individual string's spelling is "correct" or "incorrect".

Because there are multiple clients connecting to the server and sending their own string, the server needs 
multiple worker threads to help check if the strings are spelled correctly. This way, the user wouldn't have
to wait too long if there was only one thread taking in multiple inputs. The number of worker threads corresponds
to the number of clients in the program, which is four. There is also another thread in the program called the 
log thread which takes the final string message "word is correct(incorrect) spelling" to a log text file.
The final thread is the main thread of the program, or the original thread.

There are two queues used in the program, a connection queue and a log queue. The reason why C++ is used for this project
is because there is a provided queue library in the language. The connection queue is a queue of ints in where all of the
client sockets will be stored. A worker thread will take a client socket and get the string that client sends and checks 
its spelling then stores the message onto the log queue. The log queue is a queue of strings containing the messages of 
whether word is spelled correctly or not. The log thread will take each message and append them to the log text file.

Since we're dealing with a multi-threaded program, there will be problems in concurrency. So in order to avoid the
problems such as race condition or more specifically the producer/consumer problem, the program has multiple locks 
and conditional variables. There are two locks, one for each queue in the program. There four conditional variables, 
two for each queue (each has a fill condition and empty condition). They are put around the critical sections of the 
program in order to create mutual exclusion, where only one thread can be in the critical section. The critical sections
are where the threads access a shared resource, but only one thread should access it at a time. In this program's case, the 
shared variables are the two queues, so the critical sections are when we push a data item onto the queues or pop them out.

We use the pthread.h library to help provide the locks and conditional variable data types and functions. The locks are 
pthread_mutex_t and the condition variables are pthread_cond_t. There are special functions to allow the lock and unlock process around 
the critical sections and special functions to allow the condition variables to wait when queue buffer is full or empty, or signal the 
condition variable if its full or empty.


Testing Process:

The testing of the program happened multiple times for each characteristic of the program. In the beginning, I tested out the
code provided in Bryant and O'Hallaron's "Computer Systems a Programmer's Perspective" for open_listenfd() function so that I can use
it to connect with the clients and take in their inputs in the project. Once I tested how the basics of network programming works,
I then used the open_listenfd in my program.

I then tested the taking in the words from the dictionary text file and putting them into an array so that the input strings can
use it to compare the spelling. This part of the testing phase was the most simplest as it is taking words from a text file and 
place them to an array. Then pass that array and the input into a function where the input is compared to each word in the array.
I later changed these two functions to adapt to the C++'s std::string type and std::vectors (arrays). There was also a code provided by
a TA where the a server function recv() in which the parameter is the input from client and returns the bytesReturn. This part is what
is passed into the checkWord() function.

Testing multiple threads was done with testing simple functions for the threads. Such as having a thread printing "Hello World."
Most of knowing how threads work came from reading the "Three Easy Pieces" textbook as they show the creation of threads as well as
how to use the locks and conditional variables. The Chapter 31 shows the Producer/Consumer Problem in which this program tackles with,
pushing a client socket/log message onto connection queue/log queue respectively which is a producer; popping off 
client socket/log message onto connection queue/log queue respectively which is a consumer. The book clearly explains where to place the
locks and conditional variables in order to avoid problems.
